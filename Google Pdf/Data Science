{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Data Science","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPAt1sXsGab9V435a+4F+za"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"CJFJ4XzTKa3c","colab_type":"text"},"source":["Introduction of Data Sciene in Python"]},{"cell_type":"markdown","metadata":{"id":"PLCpzeHAKk64","colab_type":"text"},"source":["Week 1 In-Video Assignments"]},{"cell_type":"code","metadata":{"id":"B8YA_iq5KrkK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592294846936,"user_tz":-330,"elapsed":1374,"user":{"displayName":"Kowshik Kumar","photoUrl":"","userId":"14482198573293625656"}},"outputId":"b37a9c44-1ce9-4ef2-deaf-4c56a60dc2b7"},"source":["def add_numbers(x, y, z):\n","  return x+y+z\n"," \n","print(add_numbers(1, 2, 3))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["6\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"oBa0wvISKzfG","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"executionInfo":{"status":"ok","timestamp":1592295102655,"user_tz":-330,"elapsed":1792,"user":{"displayName":"Kowshik Kumar","photoUrl":"","userId":"14482198573293625656"}},"outputId":"3d03f508-0495-4a25-c16a-d2e2a7db8d25"},"source":["def do_math(a, b, kind = None):\n","  if (kind=='add'):\n","    return a+b\n","  else:\n","    return a-b\n"," \n","out1 = do_math(1, 2)\n","print(\"out1 : \", out1)\n","out2 = do_math(1, 2, kind = \"add\")\n","print(\"out2 : \", out2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["out1 :  -1\n","out2 :  3\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rVkWeeJ0LyFA","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592295273135,"user_tz":-330,"elapsed":1353,"user":{"displayName":"Kowshik Kumar","photoUrl":"","userId":"14482198573293625656"}},"outputId":"26c80f79-0c25-4ed3-9ed0-8b3c07c64543"},"source":["x = 'Dr. Christopher Brooks'\n"," \n","# To get the output Christopher\n"," \n","print(x[4:15])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Christopher\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"TGb-2QEtMbbI","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"status":"ok","timestamp":1592296124688,"user_tz":-330,"elapsed":1250,"user":{"displayName":"Kowshik Kumar","photoUrl":"","userId":"14482198573293625656"}},"outputId":"6c2f1427-abb3-4461-fc94-2572e4fcd853"},"source":["'''can you write a function and \n","apply it using map() to get a list\n","of all faculties and last names'''\n"," \n","lst =['0', '1', '5', '2', '3']\n","lst.sort()\n","lst\n"," \n","people = ['Dr. Christopher Brooks', 'Dr. Kevyn Collins-Thompson', 'Dr. VG Vinod Vydiswaran', 'Dr. Daniel Romero']\n"," \n","def split_title_and_name(person):\n","    firstname = person.split()[0]\n","    lastname  = person.split()[-1]\n","    return '{} {}'.format(firstname, lastname)\n"," \n","list(map(split_title_and_name, people))"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Dr. Brooks', 'Dr. Collins-Thompson', 'Dr. Vydiswaran', 'Dr. Romero']"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"SKyK9kHQPTRE","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":102},"executionInfo":{"status":"ok","timestamp":1592296381476,"user_tz":-330,"elapsed":1477,"user":{"displayName":"Kowshik Kumar","photoUrl":"","userId":"14482198573293625656"}},"outputId":"e7ddb926-4937-4cd3-f82c-b89b619dbe3c"},"source":["# Convert this function using lambda\n"," \n","people = ['Dr. Christopher Brooks', 'Dr. Kevyn Collins-Thompson', 'Dr. VG Vinod Vydiswaran', 'Dr. Daniel Romero']\n"," \n","def split_title_and_name(person):\n","    return person.split()[0] + ' ' + person.split()[-1]\n"," \n","#option 1\n","for person in people:\n","    print(split_title_and_name(person) == (lambda x: x.split()[0] + ' ' + x.split()[-1])(person))\n"," \n","#option 2\n","list(map(split_title_and_name, people)) == list(map(lambda person: person.split()[0] + ' ' + person.split()[-1], people))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["True\n","True\n","True\n","True\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"w7gboeqCQ1_v","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"status":"ok","timestamp":1592303117429,"user_tz":-330,"elapsed":1060,"user":{"displayName":"Kowshik Kumar","photoUrl":"","userId":"14482198573293625656"}},"outputId":"eeb7d9f3-b574-4cef-9beb-76c48575e80b"},"source":["# Convert usong List Comprehension\n"," \n","# Example 1\n","def times_tables():\n","    lst = []\n","    for i in range(10):\n","        for j in range (10):\n","            lst.append(i*j)\n","    return lst\n"," \n","times_tables() == [j*i for i in range(10) for j in range(10)]\n"," \n","'''Imagine you work at an service \n","provider and the user ids are all\n","two letters and two numbers (eg.\n","aa07). your task at an organisation\n","you might to be hold a record on\n","the billing activity of an each \n","user'''\n"," \n"," \n","lowercase = 'abcdefghijklmnopqrstuvwxyz'\n","digits = '0123456789'\n"," \n","correct_answer = [a+b+c+d for a in lowercase for b in lowercase for c in digits for d in digits]\n"," \n","print(correct_answer[:50], end = ' ') # Display first 50 ids"],"execution_count":null,"outputs":[{"output_type":"stream","text":["['aa00', 'aa01', 'aa02', 'aa03', 'aa04', 'aa05', 'aa06', 'aa07', 'aa08', 'aa09', 'aa10', 'aa11', 'aa12', 'aa13', 'aa14', 'aa15', 'aa16', 'aa17', 'aa18', 'aa19', 'aa20', 'aa21', 'aa22', 'aa23', 'aa24', 'aa25', 'aa26', 'aa27', 'aa28', 'aa29', 'aa30', 'aa31', 'aa32', 'aa33', 'aa34', 'aa35', 'aa36', 'aa37', 'aa38', 'aa39', 'aa40', 'aa41', 'aa42', 'aa43', 'aa44', 'aa45', 'aa46', 'aa47', 'aa48', 'aa49'] "],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sHbvQQXR2K10","colab_type":"code","colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7Ci8vIE1heCBhbW91bnQgb2YgdGltZSB0byBibG9jayB3YWl0aW5nIGZvciB0aGUgdXNlci4KY29uc3QgRklMRV9DSEFOR0VfVElNRU9VVF9NUyA9IDMwICogMTAwMDsKCmZ1bmN0aW9uIF91cGxvYWRGaWxlcyhpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IHN0ZXBzID0gdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKTsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIC8vIENhY2hlIHN0ZXBzIG9uIHRoZSBvdXRwdXRFbGVtZW50IHRvIG1ha2UgaXQgYXZhaWxhYmxlIGZvciB0aGUgbmV4dCBjYWxsCiAgLy8gdG8gdXBsb2FkRmlsZXNDb250aW51ZSBmcm9tIFB5dGhvbi4KICBvdXRwdXRFbGVtZW50LnN0ZXBzID0gc3RlcHM7CgogIHJldHVybiBfdXBsb2FkRmlsZXNDb250aW51ZShvdXRwdXRJZCk7Cn0KCi8vIFRoaXMgaXMgcm91Z2hseSBhbiBhc3luYyBnZW5lcmF0b3IgKG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIgeWV0KSwKLy8gd2hlcmUgdGhlcmUgYXJlIG11bHRpcGxlIGFzeW5jaHJvbm91cyBzdGVwcyBhbmQgdGhlIFB5dGhvbiBzaWRlIGlzIGdvaW5nCi8vIHRvIHBvbGwgZm9yIGNvbXBsZXRpb24gb2YgZWFjaCBzdGVwLgovLyBUaGlzIHVzZXMgYSBQcm9taXNlIHRvIGJsb2NrIHRoZSBweXRob24gc2lkZSBvbiBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcCwKLy8gdGhlbiBwYXNzZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJldmlvdXMgc3RlcCBhcyB0aGUgaW5wdXQgdG8gdGhlIG5leHQgc3RlcC4KZnVuY3Rpb24gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpIHsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIGNvbnN0IHN0ZXBzID0gb3V0cHV0RWxlbWVudC5zdGVwczsKCiAgY29uc3QgbmV4dCA9IHN0ZXBzLm5leHQob3V0cHV0RWxlbWVudC5sYXN0UHJvbWlzZVZhbHVlKTsKICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5leHQudmFsdWUucHJvbWlzZSkudGhlbigodmFsdWUpID0+IHsKICAgIC8vIENhY2hlIHRoZSBsYXN0IHByb21pc2UgdmFsdWUgdG8gbWFrZSBpdCBhdmFpbGFibGUgdG8gdGhlIG5leHQKICAgIC8vIHN0ZXAgb2YgdGhlIGdlbmVyYXRvci4KICAgIG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSA9IHZhbHVlOwogICAgcmV0dXJuIG5leHQudmFsdWUucmVzcG9uc2U7CiAgfSk7Cn0KCi8qKgogKiBHZW5lcmF0b3IgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGJldHdlZW4gZWFjaCBhc3luYyBzdGVwIG9mIHRoZSB1cGxvYWQKICogcHJvY2Vzcy4KICogQHBhcmFtIHtzdHJpbmd9IGlucHV0SWQgRWxlbWVudCBJRCBvZiB0aGUgaW5wdXQgZmlsZSBwaWNrZXIgZWxlbWVudC4KICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIG91dHB1dCBkaXNwbGF5LgogKiBAcmV0dXJuIHshSXRlcmFibGU8IU9iamVjdD59IEl0ZXJhYmxlIG9mIG5leHQgc3RlcHMuCiAqLwpmdW5jdGlvbiogdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKSB7CiAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJZCk7CiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gZmFsc2U7CgogIGNvbnN0IG91dHB1dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvdXRwdXRJZCk7CiAgb3V0cHV0RWxlbWVudC5pbm5lckhUTUwgPSAnJzsKCiAgY29uc3QgcGlja2VkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgcmVzb2x2ZShlLnRhcmdldC5maWxlcyk7CiAgICB9KTsKICB9KTsKCiAgY29uc3QgY2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgaW5wdXRFbGVtZW50LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2FuY2VsKTsKICBjYW5jZWwudGV4dENvbnRlbnQgPSAnQ2FuY2VsIHVwbG9hZCc7CiAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBjYW5jZWwub25jbGljayA9ICgpID0+IHsKICAgICAgcmVzb2x2ZShudWxsKTsKICAgIH07CiAgfSk7CgogIC8vIENhbmNlbCB1cGxvYWQgaWYgdXNlciBoYXNuJ3QgcGlja2VkIGFueXRoaW5nIGluIHRpbWVvdXQuCiAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9LCBGSUxFX0NIQU5HRV9USU1FT1VUX01TKTsKICB9KTsKCiAgLy8gV2FpdCBmb3IgdGhlIHVzZXIgdG8gcGljayB0aGUgZmlsZXMuCiAgY29uc3QgZmlsZXMgPSB5aWVsZCB7CiAgICBwcm9taXNlOiBQcm9taXNlLnJhY2UoW3BpY2tlZFByb21pc2UsIHRpbWVvdXRQcm9taXNlLCBjYW5jZWxQcm9taXNlXSksCiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdzdGFydGluZycsCiAgICB9CiAgfTsKCiAgaWYgKCFmaWxlcykgewogICAgcmV0dXJuIHsKICAgICAgcmVzcG9uc2U6IHsKICAgICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICAgIH0KICAgIH07CiAgfQoKICBjYW5jZWwucmVtb3ZlKCk7CgogIC8vIERpc2FibGUgdGhlIGlucHV0IGVsZW1lbnQgc2luY2UgZnVydGhlciBwaWNrcyBhcmUgbm90IGFsbG93ZWQuCiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gdHJ1ZTsKCiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICBsaS5hcHBlbmQoc3BhbihmaWxlLm5hbWUsIHtmb250V2VpZ2h0OiAnYm9sZCd9KSk7CiAgICBsaS5hcHBlbmQoc3BhbigKICAgICAgICBgKCR7ZmlsZS50eXBlIHx8ICduL2EnfSkgLSAke2ZpbGUuc2l6ZX0gYnl0ZXMsIGAgKwogICAgICAgIGBsYXN0IG1vZGlmaWVkOiAkewogICAgICAgICAgICBmaWxlLmxhc3RNb2RpZmllZERhdGUgPyBmaWxlLmxhc3RNb2RpZmllZERhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbi9hJ30gLSBgKSk7CiAgICBjb25zdCBwZXJjZW50ID0gc3BhbignMCUgZG9uZScpOwogICAgbGkuYXBwZW5kQ2hpbGQocGVyY2VudCk7CgogICAgb3V0cHV0RWxlbWVudC5hcHBlbmRDaGlsZChsaSk7CgogICAgY29uc3QgZmlsZURhdGFQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7CiAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpOwogICAgICB9OwogICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7CiAgICB9KTsKICAgIC8vIFdhaXQgZm9yIHRoZSBkYXRhIHRvIGJlIHJlYWR5LgogICAgbGV0IGZpbGVEYXRhID0geWllbGQgewogICAgICBwcm9taXNlOiBmaWxlRGF0YVByb21pc2UsCiAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgYWN0aW9uOiAnY29udGludWUnLAogICAgICB9CiAgICB9OwoKICAgIC8vIFVzZSBhIGNodW5rZWQgc2VuZGluZyB0byBhdm9pZCBtZXNzYWdlIHNpemUgbGltaXRzLiBTZWUgYi82MjExNTY2MC4KICAgIGxldCBwb3NpdGlvbiA9IDA7CiAgICB3aGlsZSAocG9zaXRpb24gPCBmaWxlRGF0YS5ieXRlTGVuZ3RoKSB7CiAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGZpbGVEYXRhLmJ5dGVMZW5ndGggLSBwb3NpdGlvbiwgTUFYX1BBWUxPQURfU0laRSk7CiAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoZmlsZURhdGEsIHBvc2l0aW9uLCBsZW5ndGgpOwogICAgICBwb3NpdGlvbiArPSBsZW5ndGg7CgogICAgICBjb25zdCBiYXNlNjQgPSBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY2h1bmspKTsKICAgICAgeWllbGQgewogICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICBhY3Rpb246ICdhcHBlbmQnLAogICAgICAgICAgZmlsZTogZmlsZS5uYW1lLAogICAgICAgICAgZGF0YTogYmFzZTY0LAogICAgICAgIH0sCiAgICAgIH07CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPQogICAgICAgICAgYCR7TWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCl9JSBkb25lYDsKICAgIH0KICB9CgogIC8vIEFsbCBkb25lLgogIHlpZWxkIHsKICAgIHJlc3BvbnNlOiB7CiAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgIH0KICB9Owp9CgpzY29wZS5nb29nbGUgPSBzY29wZS5nb29nbGUgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYiA9IHNjb3BlLmdvb2dsZS5jb2xhYiB8fCB7fTsKc2NvcGUuZ29vZ2xlLmNvbGFiLl9maWxlcyA9IHsKICBfdXBsb2FkRmlsZXMsCiAgX3VwbG9hZEZpbGVzQ29udGludWUsCn07Cn0pKHNlbGYpOwo=","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":129},"executionInfo":{"status":"ok","timestamp":1592326248188,"user_tz":-330,"elapsed":16858,"user":{"displayName":"Kowshik Kumar","photoUrl":"","userId":"14482198573293625656"}},"outputId":"3094edae-0e55-4670-e19b-ea35add83f98"},"source":[" \n","from google.colab import files\n","uploaded = files.upload()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-ec9ca18a-e8ee-4e71-a51a-28da47d1a682\" name=\"files[]\" multiple disabled />\n","     <output id=\"result-ec9ca18a-e8ee-4e71-a51a-28da47d1a682\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Saving Regular_Expressions.txt to Regular_Expressions (1).txt\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"F9KX7tgaCOVd","colab_type":"code","colab":{}},"source":["import re, sys\n","fname = sys.argv[1]\n","# with open(Regular_Expressions.txt, 'r') as file:\n","#    fstring = file.read()\n","fh = open(\"Regular_Expressions.txt\")\n","fstring = fh.read()\n","num_list = re.findall('[0-9]+',fstring)\n","num_list = map(lambda x:(x), num_list)\n","print(sum(num_list))\n"," \n","fh.close()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YPrD8j_PBaBZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":251},"executionInfo":{"status":"error","timestamp":1592326058117,"user_tz":-330,"elapsed":1354,"user":{"displayName":"Kowshik Kumar","photoUrl":"","userId":"14482198573293625656"}},"outputId":"602932b3-9c96-4ae6-c3b0-1e884a7172fe"},"source":[" \n","# 1. Import regex\n","# 2. Read file\n","# 3. Create\n","# 4. Look for integers re.findall('[0-9]+', line)\n","# 5. Convert strings to integers\n","# 6. Sum integers\n"," \n","# 1. Import regex\n","import re\n"," \n","# 2. Read file\n","fhandle = open('Regular_Expressions.txt')\n"," \n","# 3. Create list\n","numlist = list()\n"," \n","# 4. Look for integers re.findall('[0-9]+', line)\n","for line in fhandle:\n","    line = line.rstrip()\n","    # Create lists of numbers\n","    num = re.findall('[0-9]+', line)\n"," \n","    # print num\n","    # confirm that numbers are collated\n"," \n","    # print num\n","    # shows max 3 in a list\n"," \n","    # Skip blank lists\n","    if len(num) < 1:\n","        continue\n"," \n","    elif len(num) == 1:\n","        # 5. Convert strings to integers\n","        num1 = int(num[0])\n","        numlist.append(num1)\n","    elif len(num) == 2:\n","        num1 = int(num[0])\n","        num2 = int(num[1])\n","        numlist.append(num1)\n","        numlist.append(num2)\n","    else:\n","        num1 = int(num[0])\n","        num2 = int(num[1])\n","        num3 = int(num[2])\n","        numlist.append(num1)\n","        numlist.append(num2)\n","        numlist.append(num3)\n"," \n","# 6. Sum integers in a list\n","sum_num_integer = sum(numlist)\n","print(len(numlist))\n","print(sum_num_integer)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-46-709f0684f3fc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     50\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m \u001b[0;31m# 6. Sum integers in a list\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m \u001b[0msum_num_integer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     53\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msum_num_integer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'int' object is not callable"]}]},{"cell_type":"code","metadata":{"id":"ftaLYOna5y0t","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":251},"executionInfo":{"status":"error","timestamp":1592325851363,"user_tz":-330,"elapsed":1278,"user":{"displayName":"Kowshik Kumar","photoUrl":"","userId":"14482198573293625656"}},"outputId":"2c479bc3-f1f6-4393-f505-3dff02fc6460"},"source":[" import re \n"," \n","fh =open(\"Regular_Expressions.txt\")\n"," \n","sum , count = 0 , 0\n"," \n","for line in fh:\n","    f = re.findall('[0 - 9]+', line)\n","    for num in f:\n","        count += 1\n","        sum   += int(num)\n"," \n","print(sum)\n","print(count)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-41-7f8658624bc2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m    \u001b[0;32mfor\u001b[0m \u001b[0mnum\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m        \u001b[0mcount\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m        \u001b[0msum\u001b[0m   \u001b[0;34m+=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: invalid literal for int() with base 10: ' '"]}]},{"cell_type":"code","metadata":{"id":"9_Yv6bYB2y1X","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":428},"executionInfo":{"status":"ok","timestamp":1592574894034,"user_tz":-330,"elapsed":2536,"user":{"displayName":"Kowshik Kumar","photoUrl":"","userId":"14482198573293625656"}},"outputId":"efc432ca-cb2e-4c34-8c4b-65254271d5a7"},"source":[" import socket\n"," \n","mysock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n","mysock.connect(('data.pr4e.org', 80))\n","cmd = 'GET http://data.pr4e.org/intro-short.txt HTTP/1.0\\r\\n\\r\\n'.encode()\n","mysock.send(cmd)\n"," \n","while True:\n","    data = mysock.recv(512)\n","    if len(data) < 1:\n","        break\n","    print(data.decode(),end='')\n"," \n","mysock.close()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["HTTP/1.1 200 OK\r\n","Date: Fri, 19 Jun 2020 13:54:53 GMT\r\n","Server: Apache/2.4.18 (Ubuntu)\r\n","Last-Modified: Sat, 13 May 2017 11:22:22 GMT\r\n","ETag: \"1d3-54f6609240717\"\r\n","Accept-Ranges: bytes\r\n","Content-Length: 467\r\n","Cache-Control: max-age=0, no-cache, no-store, must-revalidate\r\n","Pragma: no-cache\r\n","Expires: Wed, 11 Jan 1984 05:00:00 GMT\r\n","Connection: close\r\n","Content-Type: text/plain\r\n","\r\n","Why should you learn to write programs?\n","\n","Writing programs (or programming) is a very creative \n","and rewarding activity.  You can write programs for \n","many reasons, ranging from making your living to solving\n","a difficult data analysis problem to having fun to helping\n","someone else solve a problem.  This book assumes that \n","everyone needs to know how to program, and that once \n","you know how to program you will figure out what you want \n","to do with your newfound skills.  \n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JGfeqjS88Hka","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":217},"executionInfo":{"status":"error","timestamp":1592576836699,"user_tz":-330,"elapsed":1592,"user":{"displayName":"Kowshik Kumar","photoUrl":"","userId":"14482198573293625656"}},"outputId":"cd369377-a01a-4f60-b904-5cddc81edf4b"},"source":["import urllib.request, urllib.parse, urllib.error\n","from bs4 import BeautifulSoup\n","import ssl\n"," \n","ctx = ssl.create_default_context()\n","ctx.check_hostname = False\n","ctx.veify_mode = ssl.CERT_NONE"],"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-75d78a64c1cf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mctx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mssl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcreate_default_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcheck_hostname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mveify_mode\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mssl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCERT_NONE\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'SSLContext' object has no attribute 'veify_mode'"]}]},{"cell_type":"code","metadata":{"id":"IWFtdF7C85O1","colab_type":"code","colab":{}},"source":["link = \"http://py4e-data.dr-chuck.net/comments_603495.html\"\n","html = urllib.request.urlopen(link, context = ctx).read()\n","soup = BeautifulSoup(html, 'html.parser')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jGegHefL9VCL","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"status":"ok","timestamp":1592576844495,"user_tz":-330,"elapsed":1129,"user":{"displayName":"Kowshik Kumar","photoUrl":"","userId":"14482198573293625656"}},"outputId":"286c3eb2-e831-4027-e929-d105b0ee1e23"},"source":["tags = soup('span')\n","total , count = 0 , 0\n","for tag in tags:\n","    count += 1\n","    total += int(tag.contents[0])\n","print(\"The total lines are {} and the total sum is {}\".format(count,total))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["The total lines are 50 and the total sum is 2206\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"i_3esyBrAC0M","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":217},"executionInfo":{"status":"error","timestamp":1592577635907,"user_tz":-330,"elapsed":1217,"user":{"displayName":"Kowshik Kumar","photoUrl":"","userId":"14482198573293625656"}},"outputId":"f9b7bd4f-4712-4964-8931-190f279c578f"},"source":[" import urllib.request, urllib.parse, urllib.error\n","from bs4 import BeautifulSoup\n","import ssl\n"," \n","ctx = ssl.create_default_context()\n","ctx.check_hostname = False\n","ctx.veify_mode = ssl.CERT_NONE"],"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-30f81ddaf41e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mctx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mssl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcreate_default_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcheck_hostname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mveify_mode\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mssl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCERT_NONE\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'SSLContext' object has no attribute 'veify_mode'"]}]},{"cell_type":"code","metadata":{"id":"zAXESl1nAFiO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":122},"executionInfo":{"status":"ok","timestamp":1592578700895,"user_tz":-330,"elapsed":10776,"user":{"displayName":"Kowshik Kumar","photoUrl":"","userId":"14482198573293625656"}},"outputId":"e5ed3343-9aa1-4823-a0fb-800bd6d065ad"},"source":["link  = input(\"Entrer URL ::> \")\n","count = int(input(\"Enter Count ::> \"))\n","pos   = int(input(\"Enter Position ::> \"))\n"," \n","print(\"Retriving the link...\", link)\n","for i in range(0,count):\n","    html  = urllib.request.urlopen(link).read()\n","    soup  = BeautifulSoup(html)\n","    tags  = soup(\"a\")\n"," \n","    links = tags[pos].get(\"href\")\n"," \n","output = tags[pos].contents[0]\n","print(output)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Entrer URL ::> http://py4e-data.dr-chuck.net/known_by_Nell.html\n","Enter Count ::> 7\n","Enter Position ::> 18\n","Retriving the link... http://py4e-data.dr-chuck.net/known_by_Nell.html\n","Abrar\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"6SLE1NfWG8O0","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":224},"executionInfo":{"status":"ok","timestamp":1592579155094,"user_tz":-330,"elapsed":9804,"user":{"displayName":"Kowshik Kumar","photoUrl":"","userId":"14482198573293625656"}},"outputId":"db47e169-e17a-450f-92c8-af169c26d89d"},"source":[" \n","import urllib\n","from bs4 import BeautifulSoup\n"," \n","url = input('Enter - ')\n","count = int(input('Enter count: '))\n","position = int(input('Enter position: '))\n","for i in range(count+1):\n","    html = urllib.request.urlopen(url).read()\n","    soup = BeautifulSoup(html, 'html.parser')\n","    # Retrieve all of the anchor tags\n","    tags = soup.find_all('a')\n","    print(\"Retrieving: \", url)\n","    tag = tags[position-1]\n","    url = tag.get('href', None)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Enter - http://py4e-data.dr-chuck.net/known_by_Nell.html\n","Enter count: 7\n","Enter position: 18\n","Retrieving:  http://py4e-data.dr-chuck.net/known_by_Nell.html\n","Retrieving:  http://py4e-data.dr-chuck.net/known_by_Melis.html\n","Retrieving:  http://py4e-data.dr-chuck.net/known_by_Zachary.html\n","Retrieving:  http://py4e-data.dr-chuck.net/known_by_Beatriz.html\n","Retrieving:  http://py4e-data.dr-chuck.net/known_by_Darien.html\n","Retrieving:  http://py4e-data.dr-chuck.net/known_by_Asim.html\n","Retrieving:  http://py4e-data.dr-chuck.net/known_by_Sabriyah.html\n","Retrieving:  http://py4e-data.dr-chuck.net/known_by_Analyse.html\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"SPJlJ5gTJfgR","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":71},"executionInfo":{"status":"ok","timestamp":1592580206287,"user_tz":-330,"elapsed":4697,"user":{"displayName":"Kowshik Kumar","photoUrl":"","userId":"14482198573293625656"}},"outputId":"88613eba-70a5-48f6-f30a-db26897e84fb"},"source":["import urllib\n","import json\n","import xml.etree.ElementTree as ET\n"," \n","url  = input(\"Enter URL - \")\n","u    = urllib.request.urlopen(url)\n","data = u.read()\n","xml_data = ET.fromstring(data)\n","search_str = \"comments/comment\"\n","count_tags = xml_data.findall(search_str)\n"," \n","total = 0\n","for tags in count_tags:\n","    c = tags.find(\"count\")\n","    total += int(c.text)\n"," \n","print(total)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Enter URL - http://py4e-data.dr-chuck.net/comments_603497.xml\n","2459\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XBqSD-YFVFh2","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":71},"executionInfo":{"status":"ok","timestamp":1592582967021,"user_tz":-330,"elapsed":16588,"user":{"displayName":"Kowshik Kumar","photoUrl":"","userId":"14482198573293625656"}},"outputId":"2e12caf6-c5d1-411e-b829-8101c7275a0e"},"source":["import json\n","import urllib\n","url = input(\"Enter URL - \")\n","u = urllib.request.urlopen(url)\n","data = u.read()\n","data_load = json.loads(data)\n"," \n","total = 0\n","for tags in data_load[\"comments\"]:\n","    total += tags[\"count\"]\n"," \n","print(total)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Enter URL - http://py4e-data.dr-chuck.net/comments_603498.json\n","2632\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"hIBRHoy2WXPN","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1592583156283,"user_tz":-330,"elapsed":55444,"user":{"displayName":"Kowshik Kumar","photoUrl":"","userId":"14482198573293625656"}},"outputId":"608d0a66-709b-4d4f-873b-833b5ad003ed"},"source":[" import urllib.request, urllib.parse, urllib.error\n","import json\n","import ssl\n"," \n","api_key = False\n","# If you have a Google Places API key, enter it here\n","# api_key = 'AIzaSy___IDByT70'\n","# https://developers.google.com/maps/documentation/geocoding/intro\n"," \n","if api_key is False:\n","    api_key = 42\n","    serviceurl = 'http://py4e-data.dr-chuck.net/json?'\n","else :\n","    serviceurl = 'https://maps.googleapis.com/maps/api/geocode/json?'\n"," \n","# Ignore SSL certificate errors\n","ctx = ssl.create_default_context()\n","ctx.check_hostname = False\n","ctx.verify_mode = ssl.CERT_NONE\n"," \n","while True:\n","    address = input('Enter location: ')\n","    if len(address) < 1: break\n"," \n","    parms = dict()\n","    parms['address'] = address\n","    if api_key is not False: parms['key'] = api_key\n","    url = serviceurl + urllib.parse.urlencode(parms)\n"," \n","    print('Retrieving', url)\n","    uh = urllib.request.urlopen(url, context=ctx)\n","    data = uh.read().decode()\n","    print('Retrieved', len(data), 'characters')\n"," \n","    try:\n","        js = json.loads(data)\n","    except:\n","        js = None\n"," \n","    if not js or 'status' not in js or js['status'] != 'OK':\n","        print('==== Failure To Retrieve ====')\n","        print(data)\n","        continue\n"," \n","    print(json.dumps(js, indent=4))\n"," \n","    lat = js['results'][0]['geometry']['location']['lat']\n","    lng = js['results'][0]['geometry']['location']['lng']\n","    print('lat', lat, 'lng', lng)\n","    location = js['results'][0]['formatted_address']\n","    print(location)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Enter location: University of Sao Paulo\n","Retrieving http://py4e-data.dr-chuck.net/json?address=University+of+Sao+Paulo&key=42\n","Retrieved 1703 characters\n","{\n","    \"results\": [\n","        {\n","            \"address_components\": [\n","                {\n","                    \"long_name\": \"S\\u00e3o Paulo\",\n","                    \"short_name\": \"S\\u00e3o Paulo\",\n","                    \"types\": [\n","                        \"administrative_area_level_2\",\n","                        \"political\"\n","                    ]\n","                },\n","                {\n","                    \"long_name\": \"Butanta\",\n","                    \"short_name\": \"Butanta\",\n","                    \"types\": [\n","                        \"administrative_area_level_4\",\n","                        \"political\"\n","                    ]\n","                },\n","                {\n","                    \"long_name\": \"State of S\\u00e3o Paulo\",\n","                    \"short_name\": \"SP\",\n","                    \"types\": [\n","                        \"administrative_area_level_1\",\n","                        \"political\"\n","                    ]\n","                },\n","                {\n","                    \"long_name\": \"Brazil\",\n","                    \"short_name\": \"BR\",\n","                    \"types\": [\n","                        \"country\",\n","                        \"political\"\n","                    ]\n","                }\n","            ],\n","            \"formatted_address\": \"Butanta, S\\u00e3o Paulo - State of S\\u00e3o Paulo, Brazil\",\n","            \"geometry\": {\n","                \"location\": {\n","                    \"lat\": -23.5613991,\n","                    \"lng\": -46.7307891\n","                },\n","                \"location_type\": \"GEOMETRIC_CENTER\",\n","                \"viewport\": {\n","                    \"northeast\": {\n","                        \"lat\": -23.5600501197085,\n","                        \"lng\": -46.72944011970849\n","                    },\n","                    \"southwest\": {\n","                        \"lat\": -23.5627480802915,\n","                        \"lng\": -46.73213808029149\n","                    }\n","                }\n","            },\n","            \"place_id\": \"ChIJEVnw4BFWzpQRVm7gx9L09AQ\",\n","            \"plus_code\": {\n","                \"compound_code\": \"C7Q9+CM S\\u00e3o Paulo, State of S\\u00e3o Paulo, Brazil\",\n","                \"global_code\": \"588MC7Q9+CM\"\n","            },\n","            \"types\": [\n","                \"establishment\",\n","                \"point_of_interest\",\n","                \"university\"\n","            ]\n","        }\n","    ],\n","    \"status\": \"OK\"\n","}\n","lat -23.5613991 lng -46.7307891\n","Butanta, São Paulo - State of São Paulo, Brazil\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    728\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 729\u001b[0;31m                 \u001b[0mident\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreply\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdin_socket\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    730\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/jupyter_client/session.py\u001b[0m in \u001b[0;36mrecv\u001b[0;34m(self, socket, mode, content, copy)\u001b[0m\n\u001b[1;32m    802\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 803\u001b[0;31m             \u001b[0mmsg_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_multipart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    804\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mzmq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mZMQError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/zmq/sugar/socket.py\u001b[0m in \u001b[0;36mrecv_multipart\u001b[0;34m(self, flags, copy, track)\u001b[0m\n\u001b[1;32m    474\u001b[0m         \"\"\"\n\u001b[0;32m--> 475\u001b[0;31m         \u001b[0mparts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrack\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    476\u001b[0m         \u001b[0;31m# have first part already, only loop while more to receive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.recv\u001b[0;34m()\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.recv\u001b[0;34m()\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket._recv_copy\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/zmq/backend/cython/checkrc.pxd\u001b[0m in \u001b[0;36mzmq.backend.cython.checkrc._check_rc\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: ","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-38-73e79c1eb273>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m    \u001b[0maddress\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Enter location: '\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maddress\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    702\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    703\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 704\u001b[0;31m             \u001b[0mpassword\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    705\u001b[0m         )\n\u001b[1;32m    706\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    732\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    733\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 734\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    735\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    736\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]}]}